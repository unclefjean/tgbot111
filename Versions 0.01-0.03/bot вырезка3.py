from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, CallbackContext
import os
import zipfile
import logging
import fitz  # PyMuPDF
import uuid  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–º–µ–Ω

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
processed_files = []

# –ü–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
TEMP_DIR = "temp"
os.makedirs(TEMP_DIR, exist_ok=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ä–µ–∑–∞–Ω–∏—è –Ω–∞–∫–ª–∞–¥–Ω–æ–π
def extract_invoice(file_path: str) -> str:
    logger.info(f"–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {file_path}")
    output_file = os.path.join(TEMP_DIR, f"output_{uuid.uuid4().hex}.pdf")
    pdf_document = fitz.open(file_path)
    output_document = fitz.open()

    for page_num in range(len(pdf_document)):
        page = pdf_document[page_num]
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page_width, page_height = page.rect.width, page.rect.height
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏
        grid_width = page_width / 2
        grid_height = page_height / 2
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–≤–æ–π —Å–µ—Ç–∫–∏
        invoice_rect = fitz.Rect(0, 0, grid_width, grid_height)
        # –í—ã—Ä–µ–∑–∞–µ–º –æ–±–ª–∞—Å—Ç—å –Ω–∞–∫–ª–∞–¥–Ω–æ–π
        invoice_page = output_document.new_page(width=invoice_rect.width, height=invoice_rect.height)
        invoice_page.show_pdf_page(invoice_page.rect, pdf_document, page_num, clip=invoice_rect)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π PDF
    output_document.save(output_file)
    pdf_document.close()
    output_document.close()

    logger.info(f"–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_file}")
    return output_file

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è PDF-—Ñ–∞–π–ª–æ–≤
def combine_pdfs(input_files: list, output_file: str):
    logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤.")
    output_document = fitz.open()

    for file_path in input_files:
        document = fitz.open(file_path)
        output_document.insert_pdf(document)
        document.close()

    output_document.save(output_file)
    output_document.close()
    logger.info(f"–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω—ã: {output_file}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF-—Ñ–∞–π–ª—ã –∏–ª–∏ ZIP-–∞—Ä—Ö–∏–≤—ã —Å –Ω–∞–∫–ª–∞–¥–Ω—ã–º–∏.\n"
        "2. –Ø –æ–±—Ä–∞–±–æ—Ç–∞—é –∏—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—é –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.\n"
        "3. –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /combine, —á—Ç–æ–±—ã –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω PDF.\n"
        "4. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help."
    )

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: CallbackContext):
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã.\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n"
        "/combine - –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ –æ–¥–∏–Ω PDF.\n\n"
        "üì© **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∏ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:**\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –ø–æ –Ω–æ–º–µ—Ä—É: +77011254287"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF-—Ñ–∞–π–ª–æ–≤
async def handle_document(update: Update, context: CallbackContext):
    document = update.message.document
    temp_file_path = os.path.join(TEMP_DIR, f"{document.file_id}.pdf")

    try:
        file = await document.get_file()
        await file.download_to_drive(temp_file_path)
        logger.info(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {temp_file_path}")

        if document.mime_type == "application/pdf":
            processed_file_path = extract_invoice(temp_file_path)
            processed_files.append(processed_file_path)
            await update.message.reply_text(f"–§–∞–π–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è.")
        elif document.mime_type == "application/zip":
            extracted_files = extract_zip(temp_file_path)
            await update.message.reply_text(f"ZIP-–∞—Ä—Ö–∏–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(extracted_files)} —Ñ–∞–π–ª–æ–≤.")
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF-—Ñ–∞–π–ª –∏–ª–∏ ZIP-–∞—Ä—Ö–∏–≤.")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ZIP-–∞—Ä—Ö–∏–≤–∞
def extract_zip(zip_file_path: str) -> list:
    logger.info(f"–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ZIP-–∞—Ä—Ö–∏–≤–∞: {zip_file_path}")
    extracted_files = []
    try:
        with zipfile.ZipFile(zip_file_path, 'r') as archive:
            for file_name in archive.namelist():
                if file_name.endswith(".pdf"):
                    extracted_path = os.path.join(TEMP_DIR, f"extracted_{uuid.uuid4().hex}.pdf")
                    with open(extracted_path, "wb") as f:
                        f.write(archive.read(file_name))
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ PDF-—Ñ–∞–π–ª–∞ –∏–∑ –∞—Ä—Ö–∏–≤–∞
                    processed_file_path = extract_invoice(extracted_path)
                    extracted_files.append(processed_file_path)
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                    processed_files.append(processed_file_path)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ ZIP-–∞—Ä—Ö–∏–≤–∞: {e}")
    return extracted_files

import random
import string
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
def generate_random_filename(extension="pdf") -> str:
    random_string = ''.join(random.choices(string.ascii_letters + string.digits, k=10))  # 10 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    return f"{random_string}.{extension}"

# –ö–æ–º–∞–Ω–¥–∞ /combine
async def combine(update: Update, context: CallbackContext):
    if not processed_files:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –ø—É—Å—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã /combine.")
        return

    try:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
        output_file_path = os.path.join(TEMP_DIR, f"combined_{uuid.uuid4().hex}.pdf")
        combine_pdfs(processed_files, output_file_path)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
        random_filename = generate_random_filename()

        with open(output_file_path, "rb") as output_file:
            await update.message.reply_document(document=output_file, filename=random_filename)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
    finally:
        clear_temp_files()

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
def clear_temp_files():
    logger.info("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    for root, _, files in os.walk(TEMP_DIR):
        for file in files:
            os.remove(os.path.join(root, file))
    processed_files.clear()

# –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    application = ApplicationBuilder().token("7814014008:AAHXEAuNW5RP7AUbS2CUdgdNglXJKE82aCw").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("combine", combine))
    application.add_handler(MessageHandler(filters.Document.ALL, handle_document))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    application.run_polling()


if __name__ == "__main__":
    main()